<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scott Tactical </title>
    <link>http://scotttactical.com/tags/django/</link>
    <language>en-us</language>
    <author>Scott Tactical</author>
    <rights>(C) 2016</rights>
    <updated>2016-03-22 22:34:50 -0700 PDT</updated>

    
      
        <item>
          <title>Django Search: Multiple Fields and Full Text</title>
          <link>http://scotttactical.com/django-search-multiple-fields</link>
          <pubDate>Tue, 22 Mar 2016 22:34:50 PDT</pubDate>
          <author>Scott Tactical</author>
          <guid>http://scotttactical.com/django-search-multiple-fields</guid>
          <description>

&lt;h1 id=&#34;text-search-django-model-fields:7b9a1438010ac7a2f51e76a3ddfaa0e1&#34;&gt;Text Search - Django Model Fields&lt;/h1&gt;

&lt;p&gt;Django has a pretty flexible ORM, but sometimes clients need a free-form text search to get down to the content that you are looking for. It is beyond the capability of most engineers to build a comprehensive search tool and shoehorn it into an existing application. There are people working on these problems for years.&lt;/p&gt;

&lt;p&gt;This does remind me of a senior boss that asked me to add a fuzzy search field to an application and that it was &amp;ldquo;super simple&amp;rdquo;. He said &amp;ldquo;you just do a LIKE statement against all the fields we care about!&amp;rdquo; and proceeded to pseudo code it for me. He should read my post about how not to F&amp;rsquo;k up your engineering staff.&lt;/p&gt;

&lt;h2 id=&#34;searching-with-like-statements:7b9a1438010ac7a2f51e76a3ddfaa0e1&#34;&gt;Searching with Like Statements&lt;/h2&gt;

&lt;p&gt;This is probably the first place an inexperienced engineer will start. Just pick the field and do a LIKE statement against it.&lt;/p&gt;

&lt;p&gt;ex:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;User.objects.filter(username__icontains=keyword)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will result in:
&lt;code&gt;SELECT * FROM ... WHERE USERNAME LIKE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This doesn&amp;rsquo;t scale. It&amp;rsquo;s amateurish.&lt;/p&gt;

&lt;p&gt;But this will satisfy an annoying manager for the time being considering they probably know little about computer science.&lt;/p&gt;

&lt;h2 id=&#34;using-q-objects:7b9a1438010ac7a2f51e76a3ddfaa0e1&#34;&gt;Using Q Objects&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects&#34;&gt;Q object&lt;/a&gt; in Django is kinda nice. It wraps the queryset. I need a little more information on it to be able to speak intelligently. But that aside I decided to use it in a few places where dynamic queries were valuable.&lt;/p&gt;

&lt;p&gt;After doing a little looking I found this response on &lt;a href=&#34;http://stackoverflow.com/questions/26634874/how-can-i-make-django-search-in-multiple-fields-using-querysets-and-mysql-full&#34;&gt;stack overflow&lt;/a&gt; where they suggested using this. I can tell immediately that it&amp;rsquo;s not very scalable under big load.  At the least I can get it going now with only minor levels of sin.&lt;/p&gt;

&lt;p&gt;That post is apparently taken from &lt;a href=&#34;http://julienphalip.com/post/2825034077/adding-search-to-a-django-site-in-a-snap&#34;&gt;Julien Phalip - adding search to django in a snap.&lt;/a&gt;. So credit is given. Nice work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def normalize_query(query_string,
    findterms=re.compile(r&#39;&amp;quot;([^&amp;quot;]+)&amp;quot;|(\S+)&#39;).findall,
    normspace=re.compile(r&#39;\s{2,}&#39;).sub):

    &#39;&#39;&#39;
    Splits the query string in invidual keywords, getting rid of unecessary spaces and grouping quoted words together.
    Example:
    &amp;gt;&amp;gt;&amp;gt; normalize_query(&#39;  some random  words &amp;quot;with   quotes  &amp;quot; and   spaces&#39;)
        [&#39;some&#39;, &#39;random&#39;, &#39;words&#39;, &#39;with quotes&#39;, &#39;and&#39;, &#39;spaces&#39;]
    &#39;&#39;&#39;

    return [normspace(&#39;&#39;,(t[0] or t[1]).strip()) for t in findterms(query_string)]

def get_query(query_string, search_fields):

    &#39;&#39;&#39;
    Returns a query, that is a combination of Q objects.
    That combination aims to search keywords within a model by testing the given search fields.
    &#39;&#39;&#39;

    query = None # Query to search for every search term
    terms = normalize_query(query_string)
    for term in terms:
        or_query = None # Query to search for a given term in each field
        for field_name in search_fields:
            q = Q(**{&amp;quot;%s__icontains&amp;quot; % field_name: term})
            if or_query is None:
                or_query = q
            else:
                or_query = or_query | q
        if query is None:
            query = or_query
        else:
            query = query &amp;amp; or_query

def search_for_something(request):
   query_string = &#39;&#39;
   found_entries = None
   if (&#39;q&#39; in request.GET) and request.GET[&#39;q&#39;].strip():
       query_string = request.GET[&#39;q&#39;]
       entry_query = get_query(query_string, [&#39;field1&#39;, &#39;field2&#39;, &#39;field3&#39;])
       found_entries = Model.objects.filter(entry_query).order_by(&#39;-something&#39;)

   return render_to_response(&#39;app/template-result.html&#39;,
           { &#39;query_string&#39;: query_string, &#39;found_entries&#39;: found_entries },
           context_instance=RequestContext(request)
       )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another helpful resource was from &lt;a href=&#34;https://yeti.co/blog/global-search-in-django-rest-framework/&#34;&gt;Yeti&lt;/a&gt; adding in some global search. A bit outdated but a nice resource.&lt;/p&gt;

&lt;h2 id=&#34;search-library:7b9a1438010ac7a2f51e76a3ddfaa0e1&#34;&gt;Search Library&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/django-haystack/django-haystack&#34;&gt;https://github.com/django-haystack/django-haystack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/etianen/django-watson&#34;&gt;https://github.com/etianen/django-watson&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Dump Django Databases and Create Fixtures for Testing</title>
          <link>http://scotttactical.com/post/dump-django-databases-and-create-fixtures-for-testing/</link>
          <pubDate>Wed, 24 Feb 2016 23:20:36 PST</pubDate>
          <author>Scott Tactical</author>
          <guid>http://scotttactical.com/post/dump-django-databases-and-create-fixtures-for-testing/</guid>
          <description>

&lt;h1 id=&#34;fixtures-are-a-messy-mess:25f7c7e781c9bc5fa7e4fc70ab13d75c&#34;&gt;Fixtures are a Messy Mess&lt;/h1&gt;

&lt;p&gt;It is quite a pain to maintain fixtures it seems. I am not sure why yet. Maybe there hasn&amp;rsquo;t been quite enough time on this piece of the product for it to mature.&lt;/p&gt;

&lt;h1 id=&#34;django-dumpdata:25f7c7e781c9bc5fa7e4fc70ab13d75c&#34;&gt;Django dumpdata&lt;/h1&gt;

&lt;p&gt;I tried several different variations to dump the data. I&amp;rsquo;ll include a few of them here since they might actually work for someone else.&lt;/p&gt;

&lt;p&gt;python manage.py dumpdata &amp;gt; fixture.json&lt;/p&gt;

&lt;p&gt;I kept getting various key errors.&lt;/p&gt;

&lt;p&gt;Could not load contenttypes.ContentType(pk=23): duplicate key value violates unique constraint &amp;ldquo;django_content_type_app_label_76bd3d3b_uniq&amp;rdquo;
  DETAIL:  Key (app_label, model)=(businesses, business) already exists.&lt;/p&gt;

&lt;p&gt;Eventually turned into this:&lt;/p&gt;

&lt;p&gt;python manage.py dumpdata &amp;ndash;indent=4 -e contenttypes -e auth.Permission -e admin &amp;ndash;natural-foreign &amp;gt; fixture.json&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;python manage.py dumpdata &amp;ndash;natural-foreign &amp;ndash;natural-primary &amp;ndash;indent=4 &amp;gt; fixture.json&lt;/p&gt;

&lt;p&gt;gave me this:&lt;/p&gt;

&lt;p&gt;Could not load object.User(pk=None): null value in column &amp;ldquo;user_ptr_id&amp;rdquo; violates not-null constraint&lt;/p&gt;

&lt;h1 id=&#34;dumpdata-alternatives:25f7c7e781c9bc5fa7e4fc70ab13d75c&#34;&gt;DumpData Alternatives&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.djangopackages.com/grids/g/fixtures/&#34;&gt;django grid&lt;/a&gt; to the rescue again.&lt;/p&gt;

&lt;p&gt;A lot of the packages were for generating testing fixtures. I don&amp;rsquo;t need that. What I need is basically a data backup tool so that whichever dev has the best copy of the data to be able to create the deployment fixture.&lt;/p&gt;

&lt;p&gt;I decided to give &lt;a href=&#34;https://github.com/davedash/django-fixture-magic&#34;&gt;Fixture Magic&lt;/a&gt; a try.&lt;/p&gt;

&lt;h2 id=&#34;fixture-magic:25f7c7e781c9bc5fa7e4fc70ab13d75c&#34;&gt;Fixture Magic&lt;/h2&gt;

&lt;p&gt;My initial test wasn&amp;rsquo;t very promising.&lt;/p&gt;

&lt;p&gt;ImportError: cannot import name loading&lt;/p&gt;

&lt;p&gt;But apparently I wasn&amp;rsquo;t the &lt;a href=&#34;https://github.com/davedash/django-fixture-magic/issues/37&#34;&gt;only one.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-e git://github.com/davedash/django-fixture-magic@42c6df73d11512d76e3170453f175164ff22db02#egg=django_fixture_magic&lt;/p&gt;

&lt;p&gt;Then I found out that I can&amp;rsquo;t have non-int keys. Since most of my objects use UUID that was the end of F-Magic.&lt;/p&gt;

&lt;h1 id=&#34;i-gave-up-on-fixtures:25f7c7e781c9bc5fa7e4fc70ab13d75c&#34;&gt;I Gave Up On Fixtures&lt;/h1&gt;

&lt;p&gt;This data model must just be too complex.&lt;/p&gt;

&lt;p&gt;Deploying dev environment now consists of setting up the db and loading a full DB dump.&lt;/p&gt;

&lt;p&gt;pg_dump APP &amp;gt; APP/fixtures/pg_dump.latest.sql&lt;/p&gt;

&lt;p&gt;Load it up with a script when deploying dev.&lt;/p&gt;

&lt;p&gt;psql APP &amp;lt; APP/fixtures/pg_dump.latest.sql&lt;/p&gt;

&lt;h1 id=&#34;how-now-tests:25f7c7e781c9bc5fa7e4fc70ab13d75c&#34;&gt;How Now Tests?&lt;/h1&gt;

&lt;p&gt;I know. Fixtures are kinda important with tests. I went ahead and installed &lt;a href=&#34;https://github.com/rbarrois/factory_boy&#34;&gt;Factory boy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good enough for now.&lt;/p&gt;

&lt;p&gt;Sorry Django Fixtures. You kinda suck.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
