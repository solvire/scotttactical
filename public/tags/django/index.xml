<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scott Tactical </title>
    <link>http://scotttactical.com/tags/django/</link>
    <language>en-us</language>
    <author>Scott Tactical</author>
    <rights>(C) 2017</rights>
    <updated>2017-01-15 16:00:07 -0800 PST</updated>

    
      
        <item>
          <title>Django Saleor eCommerce Review</title>
          <link>http://scotttactical.com/post/django-saleor-ecommerce-review/</link>
          <pubDate>Sun, 15 Jan 2017 16:00:07 PST</pubDate>
          <author>Scott Tactical</author>
          <guid>http://scotttactical.com/post/django-saleor-ecommerce-review/</guid>
          <description>

&lt;h1 id=&#34;django-and-ecommerce&#34;&gt;Django And eCommerce&lt;/h1&gt;

&lt;h1 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;I setup &lt;a href=&#34;http://oscarcommerce.com/&#34;&gt;Oscar&lt;/a&gt; as a demo ecommerce project in the &lt;a href=&#34;http://scotttactical.com/post/django-ecommerce-in-30-minutes/&#34;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;preface&#34;&gt;Preface&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;http://scotttactical.com/images/saleor2.png&#34; alt=&#34;Saleor&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;backstory&#34;&gt;Backstory&lt;/h1&gt;

&lt;p&gt;I just finished a post about setting up eCommerce with Python Django and wasn&amp;rsquo;t totally pleased with the process. Also I don&amp;rsquo;t think it is fair to only demo a single application.  I decided to give &lt;a href=&#34;http://getsaleor.com/&#34;&gt;Saleor&lt;/a&gt; my second slot after talking with several people online and looking through its source. The parent company has a number of nice products which was confidence building.&lt;/p&gt;

&lt;h1 id=&#34;pre-setup&#34;&gt;Pre-setup&lt;/h1&gt;

&lt;p&gt;As in the previous article, a few things were already installed like PostgreSQL and Python VirtualenvWrapper.&lt;/p&gt;

&lt;p&gt;Here are a couple details about my stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local development: Mac OS X El Cap&lt;/li&gt;
&lt;li&gt;Bitbucket (it&amp;rsquo;s free for private accounts)&lt;/li&gt;
&lt;li&gt;Python VirtualenvWrapper&lt;/li&gt;
&lt;li&gt;Django 1.10.5&lt;/li&gt;
&lt;li&gt;pip 9.0.1&lt;/li&gt;
&lt;li&gt;PostgreSQL 9.5&lt;/li&gt;
&lt;li&gt;Saleor - master branch&lt;/li&gt;
&lt;li&gt;npm 3.8.6&lt;/li&gt;
&lt;li&gt;node v6.0.0&lt;/li&gt;
&lt;li&gt;Python 2.7&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s Begin&lt;/p&gt;

&lt;h1 id=&#34;local-setup&#34;&gt;Local Setup&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ll be following the setup listed in the &lt;a href=&#34;https://saleor.readthedocs.io/en/latest/installation.html&#34;&gt;Saleor Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;setup-postgresql&#34;&gt;Setup PostgreSQL&lt;/h1&gt;

&lt;p&gt;I have installed PostgreSQL locally already. Please see the documentation for more information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PostgreSQL 9.5.3 on x86_64-apple-darwin15.4.0, compiled by Apple LLVM version 7.3.0 (clang-703.0.31), 64-bit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a database for yourself. You will probably be hitting this locally with socket.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;createdb saleor
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;javascript&#34;&gt;JavaScript&lt;/h2&gt;

&lt;p&gt;Install the appropriate / required JavaScript components.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm i webpack -g
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;virtual-environment-python&#34;&gt;Virtual Environment - Python&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;mkvirtualenv saleor
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;clone-the-source&#34;&gt;Clone The Source&lt;/h2&gt;

&lt;p&gt;CD into a directory beneath your source location. I like to do /project/source/*&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/mirumee/saleor.git
cd saleor/
pip install -r requirements.txt
export SECRET_KEY=`openssl rand -base64 9`
echo $SECRET_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep track of that secret key.&lt;/p&gt;

&lt;h2 id=&#34;build-the-schema&#34;&gt;Build The Schema&lt;/h2&gt;

&lt;p&gt;I am running PostgreSQL locally.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed -i &#39;&#39; &#39;s/saleor:saleor@//&#39; saleor/settings.py
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-front-end&#34;&gt;Build Front-End&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;npm install
npm run build-assets
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Node package install took a while. I thought it was hung so I restarted it and ran it in verbose to know it wasn&amp;rsquo;t dead.&lt;/p&gt;

&lt;h2 id=&#34;dump-schema&#34;&gt;Dump Schema&lt;/h2&gt;

&lt;p&gt;I want to add the test data to play with but I may not want it and don&amp;rsquo;t want to have to recreate the database so I dumped the initial schema.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pg_dump saleor &amp;gt; saleor_orig.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I added the test data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./manage.py populatedb
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;your-shop&#34;&gt;Your Shop&lt;/h1&gt;

&lt;h2 id=&#34;run-the-server&#34;&gt;Run The Server&lt;/h2&gt;

&lt;p&gt;Kick it off&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you did everything right you should be able to see your shop running at &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I went to create a test account and of course it blew up on the redirect. But that will be investigated later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://scotttactical.com/images/saleor3.png&#34; alt=&#34;Saleor Home Page&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;view-dashboard&#34;&gt;View Dashboard&lt;/h2&gt;

&lt;p&gt;From the command line I created a superuser so I could see the dashboard.&lt;/p&gt;

&lt;p&gt;I liked the dashboard. I think the single page app style is pretty dangerous, but I wanted to give it a try.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://scotttactical.com/images/saleor4.png&#34; alt=&#34;Saleor Home Page&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;git-add&#34;&gt;Git Add&lt;/h2&gt;

&lt;p&gt;Add the new files to the remote repository and push it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;first commit&amp;quot;
git remote set-url origin yourname@bitbucket.com:yourapp/yourapp.git
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;h2 id=&#34;code-structure&#34;&gt;Code Structure&lt;/h2&gt;

&lt;p&gt;I liked this code layout better than Oscar. It was easier to find my around and seemed cleaner overall. Linting is important to me.&lt;/p&gt;

&lt;p&gt;I would have liked to have a separate settings file for local/testing/production such as is in various cookiecutter templates.&lt;/p&gt;

&lt;h2 id=&#34;building&#34;&gt;Building&lt;/h2&gt;

&lt;p&gt;It was easier to build this. Launching it into Heroku blew up on me but this local build did not. That was acceptable. The test data was good enough to play with too.&lt;/p&gt;

&lt;h2 id=&#34;no-rest-for-me&#34;&gt;No REST for me&lt;/h2&gt;

&lt;p&gt;Again, I was disappointed with how hard it was to find information about the REST layer. Please favor mobile and JS heavy deployments. Make things API based first.&lt;/p&gt;

&lt;h2 id=&#34;will-it-stay&#34;&gt;Will it Stay&lt;/h2&gt;

&lt;p&gt;This is probably the one. I still have to go through a little more testing of course, but I think I am set for now.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Django eCommerce in 30&#43; Minutes</title>
          <link>http://scotttactical.com/post/django-ecommerce-in-30--minutes/</link>
          <pubDate>Sat, 14 Jan 2017 16:00:07 PST</pubDate>
          <author>Scott Tactical</author>
          <guid>http://scotttactical.com/post/django-ecommerce-in-30--minutes/</guid>
          <description>

&lt;h1 id=&#34;django-and-ecommerce&#34;&gt;Django And eCommerce&lt;/h1&gt;

&lt;h1 id=&#34;tl-dr&#34;&gt;TL;DR&lt;/h1&gt;

&lt;p&gt;I like Python and want to use it for eCommerce, so I went through the &lt;a href=&#34;https://djangopackages.org/grids/g/ecommerce/&#34;&gt;well known products&lt;/a&gt; and settled on Oscar as my demo. It took a while to set up, but was pretty full featured. Python and Django still have to compete with short busses like wordpress and dump trucks like Magento, but I think these tools are ready for me to start pushing.&lt;/p&gt;

&lt;h1 id=&#34;preface&#34;&gt;Preface&lt;/h1&gt;

&lt;p&gt;Let me say this took me almost 2 days to get through and evaluate, which I&amp;rsquo;m used to having a demo site up in minutes. After having gone through, I think this could be launched in half an hour.  Below are my notes of the process.&lt;/p&gt;

&lt;h1 id=&#34;backstory&#34;&gt;Backstory&lt;/h1&gt;

&lt;p&gt;I was contacted by a business partner to see if we could kick off a project to distribute some substances that newly became legal here in CA. I thought I could spin up an ecommerce app in a couple hours and be taking payments in a week. I wanted to see how fast I could do this with Django. Most my previous eCommerce deployments (many) were in PHP and many of them were in &lt;a href=&#34;https://magento.com&#34;&gt;magento&lt;/a&gt;. Had a few in ASP, Perl, (Websphere) Java. I&amp;rsquo;m over that pain.&lt;/p&gt;

&lt;p&gt;Online retail - E-commerce - as an industry, is very mature. It requires a TON of flexibility and features to compete. There isn&amp;rsquo;t a lot of waste.&lt;/p&gt;

&lt;h1 id=&#34;pre-setup&#34;&gt;Pre-setup&lt;/h1&gt;

&lt;p&gt;I will append this by saying a few things were already installed like PostgreSQL and Python VirtualenvWrapper.&lt;/p&gt;

&lt;p&gt;Here are a couple details about my stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local development: Mac OS X El Cap&lt;/li&gt;
&lt;li&gt;Bitbucket (it&amp;rsquo;s free for private accounts)&lt;/li&gt;
&lt;li&gt;Python VirtualenvWrapper&lt;/li&gt;
&lt;li&gt;Django 1.10.5&lt;/li&gt;
&lt;li&gt;PostgreSQL 9.5&lt;/li&gt;
&lt;li&gt;Django-Oscar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s Begin&lt;/p&gt;

&lt;h1 id=&#34;local-setup&#34;&gt;Local Setup&lt;/h1&gt;

&lt;h1 id=&#34;setup-postgresql&#34;&gt;Setup PostgreSQL&lt;/h1&gt;

&lt;p&gt;I have installed PostgreSQL locally already. Please see the documentation for more information.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PostgreSQL 9.5.3 on x86_64-apple-darwin15.4.0, compiled by Apple LLVM version 7.3.0 (clang-703.0.31), 64-bit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a database for yourself. You will probably be hitting this locally with socket.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;createdb [project_slug]
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;virtual-environment-python&#34;&gt;Virtual Environment - Python&lt;/h2&gt;

&lt;p&gt;Python 2.7&lt;/p&gt;

&lt;p&gt;Yes I know.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still not on P3. Leave me alone, gosh. There is always some library that causes me pain. I make it future-proof as much as possible though.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkvirtualenv yourapp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CD into a directory beneath your source location. I always do /project/source/*&lt;/p&gt;

&lt;h2 id=&#34;install-cookiecutter-django&#34;&gt;Install cookiecutter-django&lt;/h2&gt;

&lt;p&gt;I have used this &lt;a href=&#34;https://github.com/pydanny/cookiecutter-django&#34;&gt;cookiecutter&lt;/a&gt; before so I stick with what I know.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cookiecutter https://github.com/pydanny/cookiecutter-django
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go through the questions.&lt;/p&gt;

&lt;p&gt;Add the new files to the remote repository and push it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git add .
git commit -m &amp;quot;first commit&amp;quot;
git remote add origin yourname@bitbucket.com:yourapp/yourapp.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;django-setup&#34;&gt;Django Setup&lt;/h2&gt;

&lt;p&gt;I decided to try out Django Oscar. I figure it is the most popular. And also hoping it isn&amp;rsquo;t the most bloated.&lt;/p&gt;

&lt;p&gt;Add oscar to the bottom of the requirements file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim requirements/base.txt
-e git+https://github.com/django-oscar/django-oscar.git@master#egg=django-oscar
django-compressor==2.1
pycountry==17.1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a problem with oscar and Django 1.10 so pull the latest from master. I also had to modify the source to get the middleware to work as well. Small enough problems that I didn&amp;rsquo;t totally abandon the project at this point. &lt;a href=&#34;https://github.com/django-oscar/django-oscar/issues/2205&#34;&gt;https://github.com/django-oscar/django-oscar/issues/2205&lt;/a&gt; I entered a code fix + pull request so hopefully it is fixed. There was also a problem with the pycountry change as listed below.&lt;/p&gt;

&lt;p&gt;Now pip install everything.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install -r requirements/local.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should bring in everything you need.&lt;/p&gt;

&lt;p&gt;Copy the environment template file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp env.example config/settings/.env
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the manage command to confirm.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./manage.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;set-up-oscar&#34;&gt;Set Up Oscar&lt;/h1&gt;

&lt;p&gt;in &lt;code&gt;yourapp/config/settings/common.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Add &amp;lsquo;oscar&amp;rsquo; to the third party installed applications in the settings file.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&#34;https://django-oscar.readthedocs.io/en/latest/internals/getting_started.html#django-settings&#34;&gt;documentation&lt;/a&gt; update the settings for the templates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Import all the oscar items
from oscar import OSCAR_MAIN_TEMPLATE_DIR
from oscar import get_core_apps
from oscar.defaults import *

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
DJANGO_APPS = (
    # Default Django apps:
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.sites&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
    &#39;django.contrib.flatpages&#39;,

    # Useful template tags:
    # &#39;django.contrib.humanize&#39;,

    # Admin
    &#39;django.contrib.admin&#39;,

)
THIRD_PARTY_APPS = (
    &#39;crispy_forms&#39;,  # Form layouts
    &#39;allauth&#39;,  # registration
    &#39;allauth.account&#39;,  # registration
    &#39;allauth.socialaccount&#39;,  # registration

    # the oscar apps
    &#39;compressor&#39;,
    &#39;widget_tweaks&#39;,
    &#39;pycountry&#39;
) + tuple(get_core_apps())

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;MIDDLEWARE_CLASSES = (
    ...
    &#39;oscar.apps.basket.middleware.BasketMiddleware&#39;,
    &#39;django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&#39;,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;TEMPLATES = [
    {
        # See: https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND
        &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
        # See: https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs
        &#39;DIRS&#39;: [
            str(APPS_DIR.path(&#39;templates&#39;)),
            OSCAR_MAIN_TEMPLATE_DIR
        ],
        &#39;OPTIONS&#39;: {
            # See: https://docs.djangoproject.com/en/dev/ref/settings/#template-debug
            &#39;debug&#39;: DEBUG,
            # See: https://docs.djangoproject.com/en/dev/ref/settings/#template-loaders
            # https://docs.djangoproject.com/en/dev/ref/templates/api/#loader-types
            &#39;loaders&#39;: [
                &#39;django.template.loaders.filesystem.Loader&#39;,
                &#39;django.template.loaders.app_directories.Loader&#39;,
            ],
            # See: https://docs.djangoproject.com/en/dev/ref/settings/#template-context-processors
            &#39;context_processors&#39;: [
                &#39;django.template.context_processors.debug&#39;,
                &#39;django.template.context_processors.request&#39;,
                &#39;django.contrib.auth.context_processors.auth&#39;,
                &#39;django.template.context_processors.i18n&#39;,
                &#39;django.template.context_processors.media&#39;,
                &#39;django.template.context_processors.static&#39;,
                &#39;django.template.context_processors.tz&#39;,
                &#39;django.contrib.messages.context_processors.messages&#39;,
                # Your stuff: custom template context processors go here
                &#39;oscar.apps.search.context_processors.search_form&#39;,
                &#39;oscar.apps.promotions.context_processors.promotions&#39;,
                &#39;oscar.apps.checkout.context_processors.checkout&#39;,
                &#39;oscar.apps.customer.notifications.context_processors.notifications&#39;,
                &#39;oscar.core.context_processors.metadata&#39;,
            ],
        },
    },
]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows the users to log in with email as well as username, but I don&amp;rsquo;t know if I will use that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;AUTHENTICATION_BACKENDS = (
    &#39;oscar.apps.customer.auth_backends.EmailBackend&#39;,
    &#39;django.contrib.auth.backends.ModelBackend&#39;,
    &#39;allauth.account.auth_backends.AuthenticationBackend&#39;,
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At the bottom set the haystack settings.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;HAYSTACK_CONNECTIONS = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;haystack.backends.simple_backend.SimpleEngine&#39;,
    },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;set-the-urls&#34;&gt;Set the URLs&lt;/h2&gt;

&lt;p&gt;Here is my url file.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;...
from oscar.app import application

urlpatterns = [
    # url(r&#39;^$&#39;, TemplateView.as_view(template_name=&#39;pages/home.html&#39;), name=&#39;home&#39;),
    url(r&#39;^about/$&#39;, TemplateView.as_view(template_name=&#39;pages/about.html&#39;), name=&#39;about&#39;),

    # Django Admin, use {% url &#39;admin:index&#39; %}
    url(settings.ADMIN_URL, admin.site.urls),

    # User management
    url(r&#39;^users/&#39;, include(&#39;yourapp.users.urls&#39;, namespace=&#39;users&#39;)),
    url(r&#39;^accounts/&#39;, include(&#39;allauth.urls&#39;)),

    # Your stuff: custom urls includes go here
    url(r&#39;^i18n/&#39;, include(&#39;django.conf.urls.i18n&#39;)),
    url(r&#39;&#39;, include(application.urls)),

] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

if settings.DEBUG:
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;build-schema&#34;&gt;Build Schema&lt;/h2&gt;

&lt;p&gt;If the database is created and you set up everything properly you should be able to build the DB schema now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;start-local&#34;&gt;Start Local&lt;/h2&gt;

&lt;p&gt;Kick off the local server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./manage.py runserver_plus
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything works properly you should be able to go to &lt;a href=&#34;http://localhost:8000/&#34;&gt;http://localhost:8000/&lt;/a&gt; and see your new project running.&lt;/p&gt;

&lt;h1 id=&#34;store-setup&#34;&gt;Store Setup&lt;/h1&gt;

&lt;p&gt;This wasn&amp;rsquo;t quite enough for me so I needed to add some products into the application really quickly to see the catalogue.&lt;/p&gt;

&lt;h2 id=&#34;install-shipping-countries&#34;&gt;Install Shipping Countries&lt;/h2&gt;

&lt;p&gt;Pycountry should have been installed already, and it was suggested to load all the countries in the oscar documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./manage.py oscar_populate_countries --no-shipping
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This threw an attribute error. At this point I am thinking this application may be a bit fragile. There is a pull request for it so I just manually made the change and it worked. &lt;a href=&#34;https://github.com/django-oscar/django-oscar/pull/2182&#34;&gt;https://github.com/django-oscar/django-oscar/pull/2182&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m annoyed at pycountry for a menial change like that. Or provide a better SDK.&lt;/p&gt;

&lt;h2 id=&#34;where-templates-are&#34;&gt;Where Templates Are?&lt;/h2&gt;

&lt;p&gt;I realized that the templates were not seen even though they were in the path. I just copied them from the oscar sandbox example so that I had more to go off of.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/src/oscar/templates/oscar/*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also copied over all the static content into the media directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/src/oscar/static/oscar/img &amp;gt; yourapp/static
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dashboard&#34;&gt;Dashboard&lt;/h2&gt;

&lt;p&gt;Make sure you created a superuser account.&lt;/p&gt;

&lt;p&gt;Login and travel to the dashboard: &lt;a href=&#34;http://127.0.0.1:8000/dashboard/&#34;&gt;http://127.0.0.1:8000/dashboard/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;product-setup&#34;&gt;Product Setup&lt;/h2&gt;

&lt;p&gt;You need to have a category and a shipper. That is easy enough to set up. I added a couple products and viewed them on the&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://scotttactical.com/images/oscar1.png&#34; alt=&#34;Product Page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://scotttactical.com/images/oscar2.png&#34; alt=&#34;Dashboard&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h1&gt;

&lt;h2 id=&#34;code-structure&#34;&gt;Code Structure&lt;/h2&gt;

&lt;p&gt;This looked fine to me. I was able to find my way around very easily compared to the likes of Magento, IBM, SAP. Thank goodness. That is stuff of nightmares.&lt;/p&gt;

&lt;h2 id=&#34;loaders&#34;&gt;Loaders&lt;/h2&gt;

&lt;p&gt;The framework is important to me. I like to see proper recognizable patterns. There were red flags with the model class &amp;ldquo;loader&amp;rdquo; paradigm when I expected to see Django objects. I think that is unnecessary with a framework that has good bootstrapping functionality such as Django. Maybe someone can explain where my thinking is in error.&lt;/p&gt;

&lt;h2 id=&#34;no-rest-for-me&#34;&gt;No REST for me&lt;/h2&gt;

&lt;p&gt;I was disappointed with how hard it was to find information about oscar and an integration with a REST layer. Most sites MUST support mobile. And probably should support mobile FIRST. The old days of a monolithic website stack are kinda over. Especially with javascript running rampage over the facades of the interwebs.&lt;/p&gt;

&lt;p&gt;Yes, I know there is &lt;a href=&#34;https://github.com/django-oscar/django-oscar-api&#34;&gt;django oscar api&lt;/a&gt; - It needs more thorough documentation, and matrix of supported features would be nice. Overall it looks promising.&lt;/p&gt;

&lt;h2 id=&#34;performance&#34;&gt;Performance&lt;/h2&gt;

&lt;p&gt;The application felt kinda slow. Maybe it can be optimized, but for a starter, I felt like it should be more responsive. The feel of other apps was a little better. With ecommerce the most important thing is checkout flow followed by performance and product data.  Don&amp;rsquo;t skimp on ANY of those things.  Let the design languish if you have budget for a performance hacker. I&amp;rsquo;ve launched large ecommerce sites and this is what killed most of them once traffic rolled in.&lt;/p&gt;

&lt;h2 id=&#34;will-it-stay&#34;&gt;Will it Stay&lt;/h2&gt;

&lt;p&gt;I still have to look through &lt;a href=&#34;http://getsaleor.com/&#34;&gt;Saleor&lt;/a&gt; and &lt;a href=&#34;http://mezzanine.jupo.org/&#34;&gt;Cartrige on Mezzanine&lt;/a&gt; which were very appealing. I also wanted to have a hand at setting up an ecommerce app in Go, but the lack of templating and abstraction that python is good at was a knock down.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Django Search: Multiple Fields and Full Text</title>
          <link>http://scotttactical.com/django-search-multiple-fields/</link>
          <pubDate>Tue, 22 Mar 2016 22:34:50 PDT</pubDate>
          <author>Scott Tactical</author>
          <guid>http://scotttactical.com/django-search-multiple-fields/</guid>
          <description>

&lt;h1 id=&#34;text-search-django-model-fields&#34;&gt;Text Search - Django Model Fields&lt;/h1&gt;

&lt;p&gt;Django has a pretty flexible ORM, but sometimes clients need a free-form text search to get down to the content that you are looking for. It is beyond the capability of most engineers to build a comprehensive search tool and shoehorn it into an existing application. There are people working on these problems for years.&lt;/p&gt;

&lt;p&gt;This does remind me of a senior boss that asked me to add a fuzzy search field to an application and that it was &amp;ldquo;super simple&amp;rdquo;. He said &amp;ldquo;you just do a LIKE statement against all the fields we care about!&amp;rdquo; and proceeded to pseudo code it for me. He should read my post about how not to F&amp;rsquo;k up your engineering staff.&lt;/p&gt;

&lt;h2 id=&#34;searching-with-like-statements&#34;&gt;Searching with Like Statements&lt;/h2&gt;

&lt;p&gt;This is probably the first place an inexperienced engineer will start. Just pick the field and do a LIKE statement against it.&lt;/p&gt;

&lt;p&gt;ex:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;User.objects.filter(username__icontains=keyword)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which will result in:
&lt;code&gt;SELECT * FROM ... WHERE USERNAME LIKE&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This doesn&amp;rsquo;t scale. It&amp;rsquo;s amateurish.&lt;/p&gt;

&lt;p&gt;But this will satisfy an annoying manager for the time being considering they probably know little about computer science.&lt;/p&gt;

&lt;h2 id=&#34;using-q-objects&#34;&gt;Using Q Objects&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects&#34;&gt;Q object&lt;/a&gt; in Django is kinda nice. It wraps the queryset. I need a little more information on it to be able to speak intelligently. But that aside I decided to use it in a few places where dynamic queries were valuable.&lt;/p&gt;

&lt;p&gt;After doing a little looking I found this response on &lt;a href=&#34;http://stackoverflow.com/questions/26634874/how-can-i-make-django-search-in-multiple-fields-using-querysets-and-mysql-full&#34;&gt;stack overflow&lt;/a&gt; where they suggested using this. I can tell immediately that it&amp;rsquo;s not very scalable under big load.  At the least I can get it going now with only minor levels of sin.&lt;/p&gt;

&lt;p&gt;That post is apparently taken from &lt;a href=&#34;http://julienphalip.com/post/2825034077/adding-search-to-a-django-site-in-a-snap&#34;&gt;Julien Phalip - adding search to django in a snap.&lt;/a&gt;. So credit is given. Nice work.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def normalize_query(query_string,
    findterms=re.compile(r&#39;&amp;quot;([^&amp;quot;]+)&amp;quot;|(\S+)&#39;).findall,
    normspace=re.compile(r&#39;\s{2,}&#39;).sub):

    &#39;&#39;&#39;
    Splits the query string in invidual keywords, getting rid of unecessary spaces and grouping quoted words together.
    Example:
    &amp;gt;&amp;gt;&amp;gt; normalize_query(&#39;  some random  words &amp;quot;with   quotes  &amp;quot; and   spaces&#39;)
        [&#39;some&#39;, &#39;random&#39;, &#39;words&#39;, &#39;with quotes&#39;, &#39;and&#39;, &#39;spaces&#39;]
    &#39;&#39;&#39;

    return [normspace(&#39;&#39;,(t[0] or t[1]).strip()) for t in findterms(query_string)]

def get_query(query_string, search_fields):

    &#39;&#39;&#39;
    Returns a query, that is a combination of Q objects.
    That combination aims to search keywords within a model by testing the given search fields.
    &#39;&#39;&#39;

    query = None # Query to search for every search term
    terms = normalize_query(query_string)
    for term in terms:
        or_query = None # Query to search for a given term in each field
        for field_name in search_fields:
            q = Q(**{&amp;quot;%s__icontains&amp;quot; % field_name: term})
            if or_query is None:
                or_query = q
            else:
                or_query = or_query | q
        if query is None:
            query = or_query
        else:
            query = query &amp;amp; or_query

def search_for_something(request):
   query_string = &#39;&#39;
   found_entries = None
   if (&#39;q&#39; in request.GET) and request.GET[&#39;q&#39;].strip():
       query_string = request.GET[&#39;q&#39;]
       entry_query = get_query(query_string, [&#39;field1&#39;, &#39;field2&#39;, &#39;field3&#39;])
       found_entries = Model.objects.filter(entry_query).order_by(&#39;-something&#39;)

   return render_to_response(&#39;app/template-result.html&#39;,
           { &#39;query_string&#39;: query_string, &#39;found_entries&#39;: found_entries },
           context_instance=RequestContext(request)
       )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another helpful resource was from &lt;a href=&#34;https://yeti.co/blog/global-search-in-django-rest-framework/&#34;&gt;Yeti&lt;/a&gt; adding in some global search. A bit outdated but a nice resource.&lt;/p&gt;

&lt;h2 id=&#34;search-library&#34;&gt;Search Library&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/django-haystack/django-haystack&#34;&gt;https://github.com/django-haystack/django-haystack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/etianen/django-watson&#34;&gt;https://github.com/etianen/django-watson&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Dump Django Databases and Create Fixtures for Testing</title>
          <link>http://scotttactical.com/post/dump-django-databases-and-create-fixtures-for-testing/</link>
          <pubDate>Wed, 24 Feb 2016 23:20:36 PST</pubDate>
          <author>Scott Tactical</author>
          <guid>http://scotttactical.com/post/dump-django-databases-and-create-fixtures-for-testing/</guid>
          <description>

&lt;h1 id=&#34;fixtures-are-a-messy-mess&#34;&gt;Fixtures are a Messy Mess&lt;/h1&gt;

&lt;p&gt;It is quite a pain to maintain fixtures it seems. I am not sure why yet. Maybe there hasn&amp;rsquo;t been quite enough time on this piece of the product for it to mature.&lt;/p&gt;

&lt;h1 id=&#34;django-dumpdata&#34;&gt;Django dumpdata&lt;/h1&gt;

&lt;p&gt;I tried several different variations to dump the data. I&amp;rsquo;ll include a few of them here since they might actually work for someone else.&lt;/p&gt;

&lt;p&gt;python manage.py dumpdata &amp;gt; fixture.json&lt;/p&gt;

&lt;p&gt;I kept getting various key errors.&lt;/p&gt;

&lt;p&gt;Could not load contenttypes.ContentType(pk=23): duplicate key value violates unique constraint &amp;ldquo;django_content_type_app_label_76bd3d3b_uniq&amp;rdquo;
  DETAIL:  Key (app_label, model)=(businesses, business) already exists.&lt;/p&gt;

&lt;p&gt;Eventually turned into this:&lt;/p&gt;

&lt;p&gt;python manage.py dumpdata &amp;ndash;indent=4 -e contenttypes -e auth.Permission -e admin &amp;ndash;natural-foreign &amp;gt; fixture.json&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;python manage.py dumpdata &amp;ndash;natural-foreign &amp;ndash;natural-primary &amp;ndash;indent=4 &amp;gt; fixture.json&lt;/p&gt;

&lt;p&gt;gave me this:&lt;/p&gt;

&lt;p&gt;Could not load object.User(pk=None): null value in column &amp;ldquo;user_ptr_id&amp;rdquo; violates not-null constraint&lt;/p&gt;

&lt;h1 id=&#34;dumpdata-alternatives&#34;&gt;DumpData Alternatives&lt;/h1&gt;

&lt;p&gt;The &lt;a href=&#34;https://www.djangopackages.com/grids/g/fixtures/&#34;&gt;django grid&lt;/a&gt; to the rescue again.&lt;/p&gt;

&lt;p&gt;A lot of the packages were for generating testing fixtures. I don&amp;rsquo;t need that. What I need is basically a data backup tool so that whichever dev has the best copy of the data to be able to create the deployment fixture.&lt;/p&gt;

&lt;p&gt;I decided to give &lt;a href=&#34;https://github.com/davedash/django-fixture-magic&#34;&gt;Fixture Magic&lt;/a&gt; a try.&lt;/p&gt;

&lt;h2 id=&#34;fixture-magic&#34;&gt;Fixture Magic&lt;/h2&gt;

&lt;p&gt;My initial test wasn&amp;rsquo;t very promising.&lt;/p&gt;

&lt;p&gt;ImportError: cannot import name loading&lt;/p&gt;

&lt;p&gt;But apparently I wasn&amp;rsquo;t the &lt;a href=&#34;https://github.com/davedash/django-fixture-magic/issues/37&#34;&gt;only one.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-e git://github.com/davedash/django-fixture-magic@42c6df73d11512d76e3170453f175164ff22db02#egg=django_fixture_magic&lt;/p&gt;

&lt;p&gt;Then I found out that I can&amp;rsquo;t have non-int keys. Since most of my objects use UUID that was the end of F-Magic.&lt;/p&gt;

&lt;h1 id=&#34;i-gave-up-on-fixtures&#34;&gt;I Gave Up On Fixtures&lt;/h1&gt;

&lt;p&gt;This data model must just be too complex.&lt;/p&gt;

&lt;p&gt;Deploying dev environment now consists of setting up the db and loading a full DB dump.&lt;/p&gt;

&lt;p&gt;pg_dump APP &amp;gt; APP/fixtures/pg_dump.latest.sql&lt;/p&gt;

&lt;p&gt;Load it up with a script when deploying dev.&lt;/p&gt;

&lt;p&gt;psql APP &amp;lt; APP/fixtures/pg_dump.latest.sql&lt;/p&gt;

&lt;h1 id=&#34;how-now-tests&#34;&gt;How Now Tests?&lt;/h1&gt;

&lt;p&gt;I know. Fixtures are kinda important with tests. I went ahead and installed &lt;a href=&#34;https://github.com/rbarrois/factory_boy&#34;&gt;Factory boy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good enough for now.&lt;/p&gt;

&lt;p&gt;Sorry Django Fixtures. You kinda suck.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
