<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scott Tactical </title>
    <link>http://scotttactical.com/tags/php/</link>
    <language>en-us</language>
    <author>Scott Tactical</author>
    <rights>(C) 2015</rights>
    <updated>2015-11-04 12:57:42 -0800 PST</updated>

    
      
        <item>
          <title>PHPunit Slowness Performance Suggestions</title>
          <link>http://scotttactical.com/performance-suggestions-phpunit-slowness</link>
          <pubDate>Wed, 04 Nov 2015 12:57:42 PST</pubDate>
          <author>Scott Tactical</author>
          <guid>http://scotttactical.com/performance-suggestions-phpunit-slowness</guid>
          <description>

&lt;h1 id=&#34;phpunit-is-slowness:d306273837598a7a2a686add086bab85&#34;&gt;PHPUnit Is Slowness&lt;/h1&gt;

&lt;p&gt;I love &lt;a href=&#34;https://phpunit.de/&#34;&gt;PHPUnit&lt;/a&gt; don&amp;rsquo;t get me wrong. More than a testing library, I like testing, or having tests. It&amp;rsquo;s like the code got yo back bro! Build code that lasts.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;EDIT&lt;/em&gt;: I know most of the problems are inherent with tests not the testing framework.  However, my requirements dictate how I use it to a certain extent.  Peace.&lt;/p&gt;

&lt;h2 id=&#34;phpunit-is-painfully-slow:d306273837598a7a2a686add086bab85&#34;&gt;PHPUnit is painfully slow.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://scotttactical.com/images/turtle-speed.jpg&#34; alt=&#34;PHPUnit Is Slow&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Seriously. Though. Maybe having a concurrent environment it can run it would help. I worked at a place with 65,000 unit tests and if they ran as slow as our unit tests here it would never finish. It was literally taking 30-60 seconds per test. That is 65000 x 60 = 1083 hours or 45 days.&lt;/p&gt;

&lt;p&gt;For reference the 41 year old &lt;a href=&#34;http://www.npr.org/sections/thetwo-way/2015/07/13/422610986/ultramarathoner-finishes-the-appalachian-trail-in-record-time&#34;&gt;Scott Jurek&lt;/a&gt; can walk the &lt;a href=&#34;http://www.nps.gov/appa/index.htm&#34;&gt;2000+ mile Appalachian Trail&lt;/a&gt; in 45 days. Single threaded of course.&lt;/p&gt;

&lt;h2 id=&#34;why-is-phpunit-anti-performant:d306273837598a7a2a686add086bab85&#34;&gt;Why is PHPUnit Anti-Performant&lt;/h2&gt;

&lt;p&gt;Some thing that are inherent to unit tests that make them slow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tests are usually not well encapsulated&lt;/li&gt;
&lt;li&gt;Many tests aren&amp;rsquo;t true unit tests - @see integration tests&lt;/li&gt;
&lt;li&gt;Databases must be built and destroyed for every test&lt;/li&gt;
&lt;li&gt;Connections from local systems are slow&lt;/li&gt;
&lt;li&gt;Writing to file on a local system is slow&lt;/li&gt;
&lt;li&gt;Generating reports is intensive&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;strategies:d306273837598a7a2a686add086bab85&#34;&gt;Strategies&lt;/h1&gt;

&lt;h2 id=&#34;sqlite-in-memory:d306273837598a7a2a686add086bab85&#34;&gt;SQLite - In Memory&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://scotttactical.com/images/sqlite.gif&#34; alt=&#34;SQLite&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Switch to an in-memory database. Even if you have SSD drives its going to be slow. &lt;a href=&#34;https://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt; is on OS X out of the box I am fairly sure and comes with most &amp;lsquo;nix flavors. Considering they embed it all over the place.&lt;/p&gt;

&lt;p&gt;Setting up Laravel it would be something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&#39;sqlite&#39; =&amp;gt; [
    &#39;driver&#39;   =&amp;gt; &#39;sqlite&#39;,
//  &#39;database&#39; =&amp;gt; storage_path().&#39;/database.sqlite&#39;,
    &#39;database&#39; =&amp;gt; &#39;:memory:&#39;,
    &#39;prefix&#39;   =&amp;gt; &#39;&#39;,
],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just comment out the hard path.
Then add a record for the drive in your phpunit.xml
I also like to make sure my host is set to not kill anything. I have wiped out a dev database or two.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;env name=&amp;quot;DATABASE_DRIVER&amp;quot; value=&amp;quot;sqlite&amp;quot;/&amp;gt;
&amp;lt;env name=&amp;quot;DB_HOST&amp;quot; value=&amp;quot;NO&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;database-sometimes:d306273837598a7a2a686add086bab85&#34;&gt;Database - Sometimes&lt;/h2&gt;

&lt;p&gt;I have two base test cases that I use for almost everything. One that wraps up Laravel or the big framework I&amp;rsquo;m messing with or one that will just extend phpunit by itself.  It might even be better to have data groups into domains so that when you are running a group of tests that it only loads up those tables.&lt;/p&gt;

&lt;p&gt;We have a couple hundred tests. Not much.  But it takes 2-5 seconds to load up all the data. That adds up to minutes.  Can&amp;rsquo;t handle that.&lt;/p&gt;

&lt;h2 id=&#34;grouping-test-suites:d306273837598a7a2a686add086bab85&#34;&gt;Grouping Test Suites&lt;/h2&gt;

&lt;p&gt;You have the ability to group your tests. I always have my developers add docblocks such as below so that PHPUnit will know how to group thing. The fields that I want them to use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;@author - for running all mine or someone&amp;rsquo;s tests&lt;/li&gt;
&lt;li&gt;@group - I have them just put the package in this place&lt;/li&gt;
&lt;li&gt;@namespace - I think this works&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;/**
 * 
 * @author solvire &amp;lt;stevenjscott@gmail.com&amp;gt;
 * @package Rules
 * @group Rules
 * @namespace LeadFerret\Lib\Rules
 */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running &lt;code&gt;./vendor/bin/phpunit --list-groups&lt;/code&gt; will give you an idea of what groups you can run.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./vendor/bin/phpunit --list-groups
PHPUnit 4.8.16 by Sebastian Bergmann and contributors.

Available test group(s):
 - API
 - Models
 - Rules
 - Transformers
 - default
 - solvire &amp;lt;stevenjscott@gmail.com&amp;gt;
 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;filter-your-tests:d306273837598a7a2a686add086bab85&#34;&gt;Filter Your Tests&lt;/h2&gt;

&lt;p&gt;Run only the tests you need. Sometimes I&amp;rsquo;m working with a class and I want to keep running that class.  Just filter by the test class name:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./vendor/bin/phpunit --filter=&amp;quot;testValidateTrustedCanModifyCompany&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make your test names interesting camel cases. If you run testdox it comes out easier to read:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./vendor/bin/phpunit --filter=&amp;quot;testValidateTrustedCanModifyCompany&amp;quot; --testdox
PHPUnit 4.8.16 by Sebastian Bergmann and contributors.

LeadFerret\Lib\Rules\CompanyModifyRuleProvider
 [x] Validate trusted can modify company

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;turn-off-code-coverage:d306273837598a7a2a686add086bab85&#34;&gt;Turn Off Code Coverage&lt;/h2&gt;

&lt;p&gt;You don&amp;rsquo;t always have to run code coverage reports. In fact probably only before a deployment. Either you really love to see code coverage or you hate dealing with unit tests.  Doesn&amp;rsquo;t really seem to be much between.&lt;/p&gt;

&lt;h3 id=&#34;performance-tests:d306273837598a7a2a686add086bab85&#34;&gt;Performance Tests&lt;/h3&gt;

&lt;p&gt;The difference was so staggering I that I was totally irritated I didn&amp;rsquo;t find this sooner. I was even getting in trying to debug at the lower code level.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./vendor/bin/phpunit --filter=&amp;quot;testValidateTrustedCanModifyCompany&amp;quot; --no-coverage
PHPUnit 4.8.16 by Sebastian Bergmann and contributors.
.
Time: 3.98 seconds, Memory: 35.25Mb
OK (1 test, 2 assertions)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And with coverage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./vendor/bin/phpunit --filter=&amp;quot;testValidateTrustedCanModifyCompany&amp;quot;
PHPUnit 4.8.16 by Sebastian Bergmann and contributors.
.
Time: 48.54 seconds, Memory: 46.75Mb
OK (1 test, 2 assertions)
Generating code coverage report in HTML format ... done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FASTER!&lt;/p&gt;

&lt;h2 id=&#34;javascript-for-the-assist:d306273837598a7a2a686add086bab85&#34;&gt;JavaScript For The Assist&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://scotttactical.com/images/gulp.png&#34; alt=&#34;GulpJS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We have been toying with using &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt; / &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NPM&lt;/a&gt; for setting up a better workflow.  It is simple enough that once a file is saved that scripts can kick off the appropriate unit tests. If your tests are completing in less than a couple seconds then it doesn&amp;rsquo;t hurt to keep running them. If they break you may know it sooner.  This is also helpful for those people who refuse to use a full-featured IDE.  Probably also the same people that enjoy working on javascript in the dark.  I know who you are. O.o&lt;/p&gt;

&lt;h1 id=&#34;conclusion:d306273837598a7a2a686add086bab85&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Life is much better now.&lt;/p&gt;

&lt;p&gt;Test-driven development is a great way to go about things.  I highly suggest it. It makes your life easier in the long run and your credibility as an engineer is safer when you aren&amp;rsquo;t worried about whether you are going to break things. If you automate the process and provide cool reports with graphs then you can build a friendly rivalry based on coverage rights.&lt;/p&gt;

&lt;p&gt;Build Quality Software&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Engineer; Don&amp;rsquo;t Hack&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;=st=&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>PHP Hypermedia REST API wrapper</title>
          <link>http://scotttactical.com/php-hypermedia-rest-api-wrapper/</link>
          <pubDate>Tue, 08 Sep 2015 00:00:00 UTC</pubDate>
          <author>Scott Tactical</author>
          <guid>http://scotttactical.com/php-hypermedia-rest-api-wrapper/</guid>
          <description>

&lt;h2 id=&#34;hypermedia-for-php-apis:25373a7577ce5a1592137b8a28eee7f4&#34;&gt;Hypermedia for PHP APIs.&lt;/h2&gt;

&lt;p&gt;Well, here it is.  I&amp;rsquo;m finally finishing up my Hypermedia layer for our &lt;a href=&#34;http://laravel.com/docs/5.1&#34; title=&#34;Laravel 5.1&#34;&gt;Laravel 5.1&lt;/a&gt; build. I am excited about the possibilities for this library and think this might help bring more PHP products into the era of &lt;a href=&#34;https://twitter.com/hashtag/iot&#34;&gt;Internet-of-Things&lt;/a&gt; (IoT).&lt;/p&gt;

&lt;h3 id=&#34;in-production-alpha:25373a7577ce5a1592137b8a28eee7f4&#34;&gt;In Production - Alpha&lt;/h3&gt;

&lt;p&gt;Right now I have it in our very alpha phase version of the software running the &lt;a href=&#34;http://docs.leadferretuser.apiary.io/#&#34;&gt;LeadFerret&lt;/a&gt; business lead search system. It is slowly getting to where I would like it to be. Of course it takes a lot of work to manage business expectations since they and PHP devs tend to treat an API like a junk drawer.&lt;/p&gt;

&lt;h3 id=&#34;so-why-now:25373a7577ce5a1592137b8a28eee7f4&#34;&gt;So why now?&lt;/h3&gt;

&lt;p&gt;For about 20 or so years we have been collectively building sophisticated network interfaces for humans. The most advanced interface is the web browser. The browser&amp;rsquo;s job is to present or render data to the user in way that allows them to consume and then determine what the information means. In addition to the specific data quested the server will also present the representative data that delivers context. This was necessary by convention and dictated by market demand. People en mass were going into the business of supplying customers and other businesses with data. For the most part that data is self-serve. I&amp;rsquo;ll write more about that philosophy at a later time.&lt;/p&gt;

&lt;h2 id=&#34;metadata-and-context:25373a7577ce5a1592137b8a28eee7f4&#34;&gt;Metadata and Context&lt;/h2&gt;

&lt;p&gt;Each response should contain everything that is necessary for an intelligent agent to decide what to do next. Considering that machines will eclipse humans in pretty much every intelligence metric we can be qualified in keeping them in the category of intelligent agents. They will be making their own decisions based on the data.&lt;/p&gt;

&lt;p&gt;In the past the design of an API would leave the interpretation of the HTTP service up to the designer of the API&amp;rsquo;s consumer. The context of the data is completely absent from the source of the data. Most of the time the designer of the client would have to build a specific set of functions or classes that would represent what the designer believed the documentation was trying to tell us about the data. Most web service designers were so far off from matching the returned data streams with the actual business objects the data represented that there was no great benefit in trying to have a client that mimicked the server object structure. The simple genius of the REST paradigm is that is requires the business object to be represented in the transaction and builds on the strengths of HTTP.&lt;/p&gt;

&lt;h2 id=&#34;data-context-and-the-long-form:25373a7577ce5a1592137b8a28eee7f4&#34;&gt;Data Context and the Long Form&lt;/h2&gt;

&lt;p&gt;Sample JSON output with context&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;
{
    &amp;quot;currentItemCount&amp;quot;: 1, 
    &amp;quot;items&amp;quot;: [
        {
            &amp;quot;company&amp;quot;: {
                &amp;quot;address&amp;quot;: &amp;quot;4209 Technology Drive&amp;quot;, 
                &amp;quot;alexa&amp;quot;: 0, 
                &amp;quot;area_code&amp;quot;: 510, 
                &amp;quot;city&amp;quot;: &amp;quot;Fremont&amp;quot;, 
                &amp;quot;county&amp;quot;: &amp;quot;Alameda&amp;quot;, 
                &amp;quot;domain&amp;quot;: &amp;quot;3pardata.com&amp;quot;, 
                &amp;quot;employees&amp;quot;: 15, 
                &amp;quot;f1000&amp;quot;: 0, 
                &amp;quot;fbpage&amp;quot;: &amp;quot;&amp;quot;, 
                &amp;quot;id&amp;quot;: 38252, 
                &amp;quot;location&amp;quot;: {
                    &amp;quot;latitude&amp;quot;: 37.520000457764, 
                    &amp;quot;longitude&amp;quot;: -121.95999908447
                }, 
                &amp;quot;naics&amp;quot;: 0, 
                &amp;quot;name&amp;quot;: &amp;quot;3PARdata, Inc.&amp;quot;, 
                &amp;quot;phone&amp;quot;: &amp;quot;510-413-5999&amp;quot;, 
                &amp;quot;revenue&amp;quot;: 35, 
                &amp;quot;sic&amp;quot;: &amp;quot;3572&amp;quot;, 
                &amp;quot;state&amp;quot;: &amp;quot;CA&amp;quot;, 
                &amp;quot;year_founded&amp;quot;: 1999, 
                &amp;quot;zip&amp;quot;: &amp;quot;94538&amp;quot;
            }, 
            &amp;quot;created&amp;quot;: {
                &amp;quot;date&amp;quot;: &amp;quot;2015-09-30 06:06:55.000000&amp;quot;, 
                &amp;quot;timezone&amp;quot;: &amp;quot;UTC&amp;quot;, 
                &amp;quot;timezone_type&amp;quot;: 3
            }, 
            &amp;quot;crowd_score&amp;quot;: 0, 
            &amp;quot;first_name&amp;quot;: &amp;quot;Jeff&amp;quot;, 
            &amp;quot;gender&amp;quot;: &amp;quot;male&amp;quot;, 
            &amp;quot;id&amp;quot;: 12756, 
            &amp;quot;last_name&amp;quot;: &amp;quot;Price&amp;quot;, 
            &amp;quot;phone&amp;quot;: &amp;quot;510-413-5999&amp;quot;, 
            &amp;quot;professional_categories&amp;quot;: [
                &amp;quot;engineering&amp;quot;, 
                &amp;quot;photographer&amp;quot;
            ], 
            &amp;quot;score&amp;quot;: 38, 
            &amp;quot;title&amp;quot;: &amp;quot;Vice President of Engineering and Founder&amp;quot;, 
            &amp;quot;title_level&amp;quot;: &amp;quot;VP&amp;quot;, 
            &amp;quot;useragent&amp;quot;: &amp;quot;Chrome&amp;quot;
        }
    ], 
    &amp;quot;itemsPerPage&amp;quot;: &amp;quot;50&amp;quot;, 
    &amp;quot;pageIndex&amp;quot;: 1, 
    &amp;quot;totalItems&amp;quot;: 1, 
    &amp;quot;totalPages&amp;quot;: 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An allegory: an API client contacts a web service requesting a list of book titles. The most economical thing would be to stream back a delimited list of integers. That was all that was requested right? Could anyone figure out what it means if found alone. Not really. Only if they were able to consult with other sources: namely the documentation.&lt;/p&gt;

&lt;p&gt;Social and modern media tends to deliver everything in the short form. It only provides the least amount of information possible. And then by a genetic algorithm the data that is the most entertaining bubbles up to the top. It lives without context. A picture of a cat or a meme with only a few lines. Even important topics in politics and commerce are made without context. The long form is dead. Although I have started to see a renewed interest especially when visiting Medium.&lt;/p&gt;

&lt;h2 id=&#34;architecture:25373a7577ce5a1592137b8a28eee7f4&#34;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;This SDK attempts to represent a paradigm that mimics the organic agents of the Internet. Sorta. What I mean by that is the naming convention and the architecture are set up so they suggest some structures that are self-documenting. For instance the main controller for the pattern is a RepresentationalController. It represents the resource. If there is something that needs to be presented pertaining to the resource the RepresentationalController should answer the call.&lt;/p&gt;

&lt;p&gt;Because the RepresentationalController is going to interpret the call it must handle translation of the verbs. Thankfully there are only a handful of authorized verbs so the interpretation is trivial.&lt;/p&gt;

&lt;p&gt;I will elaborate more on the individual aspects of the architecture at a later time. Right now I&amp;rsquo;m leaving it brief.&lt;/p&gt;

&lt;h2 id=&#34;closing:25373a7577ce5a1592137b8a28eee7f4&#34;&gt;Closing&lt;/h2&gt;

&lt;p&gt;Probably not an acceptable instruction, but it&amp;rsquo;s a start. I&amp;rsquo;ll keep posting as I can.&lt;/p&gt;

&lt;p&gt;ST&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
